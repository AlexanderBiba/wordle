name: 🚀 Deploy to GitHub Pages

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    name: 🏗️ Build and Test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build for GitHub Pages
        run: PUBLIC_URL=/wordle/ npm run build
        env:
          CI: false
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
          
      - name: 🧪 Test build locally
        run: |
          echo "Testing build output..."
          ls -la build/
          echo "Checking for PWA files..."
          ls -la build/ | grep -E "(manifest|sw|logo)"
          echo "Checking service worker content..."
          if [ -f "build/sw.js" ]; then
            echo "✅ Service worker exists"
            head -5 build/sw.js
          else
            echo "❌ Service worker missing"
          fi
          echo "Checking manifest content..."
          if [ -f "build/manifest.json" ]; then
            echo "✅ Manifest exists"
            cat build/manifest.json | jq '.name, .start_url, .scope' || echo "Manifest content (jq not available):"
            cat build/manifest.json
          else
            echo "❌ Manifest missing"
          fi
          
      - name: 📁 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: build/
          retention-days: 1

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    name: 🚀 Deploy to GitHub Pages
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build for GitHub Pages
        run: PUBLIC_URL=/wordle/ npm run build
        env:
          CI: false
          REACT_APP_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
          
      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
          publish_branch: gh-pages
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: '🚀 Deploy to GitHub Pages - ${{ github.sha }}'
          
      - name: ✅ Deployment status
        run: |
          echo "🎉 App successfully deployed to GitHub Pages!"
          echo "🌐 Live URL: https://alexanderbiba.github.io/wordle"
          echo "📱 PWA features: Installable, Offline, Service Worker"
          echo "🔄 Next deployment will be automatic on push to main"

  # PWA validation and testing
  validate-pwa:
    needs: deploy
    runs-on: ubuntu-latest
    name: 🔍 Validate PWA
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📁 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: build/
        
      - name: 🧪 Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: 🔍 Verify PWA Build
        run: |
          echo "Verifying PWA build files..."
          node scripts/verify-pwa-build.js
        
      - name: 🔍 Run PWA CI Testing
        run: |
          echo "Running comprehensive PWA CI testing..."
          chmod +x scripts/test-pwa-ci.sh
          ./scripts/test-pwa-ci.sh
          
      - name: 🔍 Validate PWA Files
        run: |
          echo "Validating PWA files..."
          echo "Service Worker:"
          if [ -f "build/sw.js" ]; then
            echo "✅ SW exists, size: $(du -h build/sw.js | cut -f1)"
            echo "First few lines:"
            head -3 build/sw.js
          else
            echo "❌ Service worker missing"
          fi
          
          echo "Manifest:"
          if [ -f "build/manifest.json" ]; then
            echo "✅ Manifest exists, size: $(du -h build/manifest.json | cut -f1)"
            echo "Manifest content:"
            cat build/manifest.json
          else
            echo "❌ Manifest missing"
          fi
          
          echo "Icons:"
          ls -la build/logo*.png 2>/dev/null && echo "✅ Icons found" || echo "❌ Icons missing"
          
      - name: 📊 Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 30
          
      - name: 🔍 Manual PWA Validation
        run: |
          echo "Running manual PWA validation..."
          
          # Start server
          npx serve -s build -p 3000 &
          SERVER_PID=$!
          sleep 5
          
          # Test basic PWA features
          echo "Testing PWA features..."
          
          # Check manifest
          MANIFEST_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/manifest.json)
          echo "Manifest status: $MANIFEST_STATUS"
          
          # Check service worker
          SW_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/sw.js)
          echo "Service worker status: $SW_STATUS"
          
          # Check icons
          ICON192_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/logo192.png)
          ICON512_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/logo512.png)
          echo "Icon 192 status: $ICON192_STATUS"
          echo "Icon 512 status: $ICON512_STATUS"
          
          # Check main page
          PAGE_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/)
          echo "Main page status: $PAGE_STATUS"
          
          # Validate PWA requirements
          if [ "$MANIFEST_STATUS" = "200" ] && [ "$SW_STATUS" = "200" ] && [ "$ICON192_STATUS" = "200" ] && [ "$ICON512_STATUS" = "200" ] && [ "$PAGE_STATUS" = "200" ]; then
            echo "✅ All PWA files are accessible"
          else
            echo "❌ Some PWA files are not accessible"
            exit 1
          fi
          
          # Kill server
          kill $SERVER_PID 2>/dev/null || true

  # Performance monitoring
  performance-check:
    needs: deploy
    runs-on: ubuntu-latest
    name: 📊 Performance Check
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📁 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: build/
        
      - name: 📊 Check bundle size
        run: |
          echo "📦 Bundle size analysis:"
          echo "JavaScript: $(du -h build/static/js/*.js | tail -1 | cut -f1)"
          echo "CSS: $(du -h build/static/css/*.css | tail -1 | cut -f1)"
          echo "Total build: $(du -sh build/ | cut -f1)"
          
      - name: 🔍 Check PWA files
        run: |
          echo "📱 PWA file validation:"
          echo "Manifest: $(ls -la build/manifest.json 2>/dev/null && echo "✅" || echo "❌")"
          echo "Service Worker: $(ls -la build/sw.js 2>/dev/null && echo "✅" || echo "❌")"
          echo "Icons: $(ls -la build/logo*.png 2>/dev/null && echo "✅" || echo "❌")"

  # Notify deployment status
  notify:
    needs: [deploy, validate-pwa, performance-check]
    runs-on: ubuntu-latest
    name: 📢 Notify Status
    if: always()
    
    steps:
      - name: ✅ Deployment Summary
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 PWA Deployment Successful!"
            echo "🌐 Live at: https://alexanderbiba.github.io/wordle"
            echo "📱 PWA Features: ✅ Installable ✅ Offline ✅ Service Worker"
          else
            echo "❌ PWA Deployment Failed!"
            echo "Check the logs above for details"
          fi
          
          if [ "${{ needs.validate-pwa.result }}" == "success" ]; then
            echo "🔍 PWA Validation: ✅ Passed"
          else
            echo "🔍 PWA Validation: ❌ Failed"
          fi
          
          if [ "${{ needs.performance-check.result }}" == "success" ]; then
            echo "📊 Performance Check: ✅ Passed"
          else
            echo "📊 Performance Check: ❌ Failed"
          fi 